{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sympy as sym\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are interested in the set of portfolio's that give us the highst returns for the same amount of volatility.\n",
    "  \n",
    "So how do we find the highest returns?\n",
    "\n",
    "Optimization finds the best possible of something so we are trying to find the peak of a fucntion or the minimum of the negative of the function "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$ y = (x-1)^2 + 1$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the second derivative of the function is equal to 2\n",
      "this the grandient is always increasing thus dy/dx = 0 is a minima\n"
     ]
    }
   ],
   "source": [
    "x = sym.symbols('x')\n",
    "\n",
    "# function\n",
    "y = (x-1)**2 - 1\n",
    "# generate x values\n",
    "xx = np.linspace(-4,6,200)\n",
    "# lambdify the sympy expression\n",
    "fxx = sym.lambdify(x,y)\n",
    "# plot x and y values\n",
    "plt.plot(xx,fxx(xx), label='f(x) = $%s$' %sym.latex(y))\n",
    "\n",
    "# differentiate the fucntion \n",
    "dy = sym.diff(y)\n",
    "# lambdify the sympy expre\n",
    "dfxx = sym.lambdify(x,dy)\n",
    "plt.plot(xx,dfxx(xx), label='df(x) = $%s$' %sym.latex(dy))\n",
    "\n",
    "plt.xlabel('x')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# take the second derivative\n",
    "ddy = sym.diff(dy)\n",
    "print(f\"the second derivative of the function is equal to {ddy}\")\n",
    "print(\"this the grandient is always increasing thus dy/dx = 0 is a minima\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p><p>\n",
    "<img src='https://i.imgur.com/aAR1OQP.png'  style=\"width: 600px;\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The orange dot is the best that we can do given the constraint of x must be less than or equal to 0. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>QUIZ QUESTION</b>\n",
    "\n",
    "Let’s say we want to construct a portfolio containing 2 stocks, Stock 1 and Stock 2.\n",
    "\n",
    "Stock 1: Expected return=15%, Volatility=10%.   \n",
    "Stock 2: Expected return=10%, Volatility=5%\n",
    "\n",
    "Correlation between Stock A and B = 0.25\n",
    "\n",
    "What weights on Stocks 1 and 2, $x_1$ and $x_2$, will give the minimum variance portfolio?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Portfolio variance for a two asset portfolio\n",
    "\n",
    "$ (1) \\quad w_A + w_B = 1 $ \n",
    "\n",
    "$ (2)\\quad  \\sigma _{p}^{2}=w_{A}^{2}\\sigma _{A}^{2}+w_{B}^{2}\\sigma _{B}^{2}+2w_{A}w_{B}\\sigma _{A}\\sigma _{B}\\rho _{AB} $\n",
    "\n",
    "Re-arranging equation 1   \n",
    "  \n",
    "$ (3) \\quad w_B = 1 - w_A $\n",
    "\n",
    "Substituting $(3)$ into $(2)$:\n",
    "\n",
    "$ (4)\\quad  \\sigma _{p}^{2}=w_{A}^{2}\\sigma _{A}^{2}+(1 - w_A)^{2}\\sigma _{B}^{2}+2w_{A}(1 - w_A)\\sigma _{A}\\sigma _{B}\\rho _{AB} $"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "w = sym.symbols('w')\n",
    "sigma_1 = 0.1\n",
    "sigma_2 = 0.05\n",
    "corr = 0.25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
